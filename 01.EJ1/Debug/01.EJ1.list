
01.EJ1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec0  08002ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  2000000c  08002ed4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  08002ed4  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c887  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c43  00000000  00000000  0002c8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002e508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002000c  00000000  00000000  0002f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0b4  00000000  00000000  0004f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3b3f  00000000  00000000  0005b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f3ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000286c  00000000  00000000  0011f440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002e88 	.word	0x08002e88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002e88 	.word	0x08002e88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fae4 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f824 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8e8 	bl	80006fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f88c 	bl	8000648 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000530:	f000 f8b4 	bl	800069c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000534:	2101      	movs	r1, #1
 8000536:	480c      	ldr	r0, [pc, #48]	; (8000568 <main+0x4c>)
 8000538:	f000 fe19 	bl	800116e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	480a      	ldr	r0, [pc, #40]	; (8000568 <main+0x4c>)
 8000540:	f000 fe15 	bl	800116e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <main+0x4c>)
 800054a:	f000 fe10 	bl	800116e <HAL_GPIO_TogglePin>

	  HAL_Delay(200);
 800054e:	20c8      	movs	r0, #200	; 0xc8
 8000550:	f000 fb3e 	bl	8000bd0 <HAL_Delay>
	  state=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000554:	2101      	movs	r1, #1
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <main+0x4c>)
 8000558:	f000 fdd8 	bl	800110c <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b02      	ldr	r3, [pc, #8]	; (800056c <main+0x50>)
 8000562:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000564:	e7e6      	b.n	8000534 <main+0x18>
 8000566:	bf00      	nop
 8000568:	40020400 	.word	0x40020400
 800056c:	20000578 	.word	0x20000578

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fc7a 	bl	8002e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a28      	ldr	r2, [pc, #160]	; (8000640 <SystemClock_Config+0xd0>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <SystemClock_Config+0xd4>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80005e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005ee:	2308      	movs	r3, #8
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fbc6 	bl	8001d8c <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000606:	f000 f927 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2103      	movs	r1, #3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 ff04 	bl	8001434 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000632:	f000 f911 	bl	8000858 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART3_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_USART3_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART3_UART_Init+0x4c>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART3_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART3_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART3_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART3_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART3_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART3_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_USART3_UART_Init+0x4c>)
 8000680:	f001 fe08 	bl	8002294 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800068a:	f000 f8e5 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028
 8000698:	40004800 	.word	0x40004800

0800069c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006aa:	2206      	movs	r2, #6
 80006ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006bc:	2202      	movs	r2, #2
 80006be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006e6:	f000 fd5c 	bl	80011a2 <HAL_PCD_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80006f0:	f000 f8b2 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000006c 	.word	0x2000006c

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4b4c      	ldr	r3, [pc, #304]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a4b      	ldr	r2, [pc, #300]	; (8000848 <MX_GPIO_Init+0x14c>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b49      	ldr	r3, [pc, #292]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b45      	ldr	r3, [pc, #276]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a44      	ldr	r2, [pc, #272]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b42      	ldr	r3, [pc, #264]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a3d      	ldr	r2, [pc, #244]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <MX_GPIO_Init+0x14c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b37      	ldr	r3, [pc, #220]	; (8000848 <MX_GPIO_Init+0x14c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a36      	ldr	r2, [pc, #216]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b34      	ldr	r3, [pc, #208]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2f      	ldr	r2, [pc, #188]	; (8000848 <MX_GPIO_Init+0x14c>)
 800078c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_GPIO_Init+0x14c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_GPIO_Init+0x14c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a28      	ldr	r2, [pc, #160]	; (8000848 <MX_GPIO_Init+0x14c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_GPIO_Init+0x14c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80007c0:	4822      	ldr	r0, [pc, #136]	; (800084c <MX_GPIO_Init+0x150>)
 80007c2:	f000 fcbb 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4821      	ldr	r0, [pc, #132]	; (8000850 <MX_GPIO_Init+0x154>)
 80007cc:	f000 fcb6 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	481b      	ldr	r0, [pc, #108]	; (8000854 <MX_GPIO_Init+0x158>)
 80007e8:	f000 fafc 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <MX_GPIO_Init+0x150>)
 8000806:	f000 faed 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800080a:	2340      	movs	r3, #64	; 0x40
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <MX_GPIO_Init+0x154>)
 8000822:	f000 fadf 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_GPIO_Init+0x154>)
 800083a:	f000 fad3 	bl	8000de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083e:	bf00      	nop
 8000840:	3730      	adds	r7, #48	; 0x30
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020400 	.word	0x40020400
 8000850:	40021800 	.word	0x40021800
 8000854:	40020800 	.word	0x40020800

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_MspInit+0x4c>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_UART_MspInit+0x84>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12c      	bne.n	8000930 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_UART_MspInit+0x88>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_UART_MspInit+0x88>)
 80008e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_UART_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_UART_MspInit+0x88>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_UART_MspInit+0x88>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800090e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000920:	2307      	movs	r3, #7
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_UART_MspInit+0x8c>)
 800092c:	f000 fa5a 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004800 	.word	0x40004800
 800093c:	40023800 	.word	0x40023800
 8000940:	40020c00 	.word	0x40020c00

08000944 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0a0      	sub	sp, #128	; 0x80
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2258      	movs	r2, #88	; 0x58
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fa87 	bl	8002e78 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000972:	d14d      	bne.n	8000a10 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000974:	2320      	movs	r3, #32
 8000976:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000978:	2300      	movs	r3, #0
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4618      	mov	r0, r3
 8000982:	f000 ff77 	bl	8001874 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 800098c:	f7ff ff64 	bl	8000858 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <HAL_PCD_MspInit+0xd4>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <HAL_PCD_MspInit+0xd4>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <HAL_PCD_MspInit+0xd4>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009be:	230a      	movs	r3, #10
 80009c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 80009ca:	f000 fa0b 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e0:	4619      	mov	r1, r3
 80009e2:	480e      	ldr	r0, [pc, #56]	; (8000a1c <HAL_PCD_MspInit+0xd8>)
 80009e4:	f000 f9fe 	bl	8000de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_PCD_MspInit+0xd4>)
 80009ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_PCD_MspInit+0xd4>)
 80009ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f2:	6353      	str	r3, [r2, #52]	; 0x34
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <HAL_PCD_MspInit+0xd4>)
 80009fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_PCD_MspInit+0xd4>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	6453      	str	r3, [r2, #68]	; 0x44
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <HAL_PCD_MspInit+0xd4>)
 8000a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3780      	adds	r7, #128	; 0x80
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f890 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9e:	490e      	ldr	r1, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab4:	4c0b      	ldr	r4, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ac2:	f7ff ffd7 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f002 f9b3 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fd27 	bl	800051c <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ad0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000adc:	08002ec8 	.word	0x08002ec8
  ldr r2, =_sbss
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae4:	20000580 	.word	0x20000580

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f931 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fea0 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f93b 	bl	8000dca <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 f911 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	2000057c 	.word	0x2000057c

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000057c 	.word	0x2000057c

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff47 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5c 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb0 	bl	8000d38 <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	e165      	b.n	80010cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f040 8154 	bne.w	80010c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d005      	beq.n	8000e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d130      	bne.n	8000e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	f003 0201 	and.w	r2, r3, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d017      	beq.n	8000ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d123      	bne.n	8000f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	08da      	lsrs	r2, r3, #3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3208      	adds	r2, #8
 8000ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	08da      	lsrs	r2, r3, #3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3208      	adds	r2, #8
 8000f22:	69b9      	ldr	r1, [r7, #24]
 8000f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0203 	and.w	r2, r3, #3
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80ae 	beq.w	80010c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <HAL_GPIO_Init+0x300>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a5c      	ldr	r2, [pc, #368]	; (80010e4 <HAL_GPIO_Init+0x300>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b5a      	ldr	r3, [pc, #360]	; (80010e4 <HAL_GPIO_Init+0x300>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f86:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <HAL_GPIO_Init+0x304>)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4f      	ldr	r2, [pc, #316]	; (80010ec <HAL_GPIO_Init+0x308>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d025      	beq.n	8000ffe <HAL_GPIO_Init+0x21a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4e      	ldr	r2, [pc, #312]	; (80010f0 <HAL_GPIO_Init+0x30c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d01f      	beq.n	8000ffa <HAL_GPIO_Init+0x216>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4d      	ldr	r2, [pc, #308]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x212>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4c      	ldr	r2, [pc, #304]	; (80010f8 <HAL_GPIO_Init+0x314>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x20e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4b      	ldr	r2, [pc, #300]	; (80010fc <HAL_GPIO_Init+0x318>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x20a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4a      	ldr	r2, [pc, #296]	; (8001100 <HAL_GPIO_Init+0x31c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x206>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a49      	ldr	r2, [pc, #292]	; (8001104 <HAL_GPIO_Init+0x320>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x202>
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	e00c      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e00a      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000fea:	2305      	movs	r3, #5
 8000fec:	e008      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000fee:	2304      	movs	r3, #4
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e004      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ffe:	2300      	movs	r3, #0
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	f002 0203 	and.w	r2, r2, #3
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	4093      	lsls	r3, r2
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001010:	4935      	ldr	r1, [pc, #212]	; (80010e8 <HAL_GPIO_Init+0x304>)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101e:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <HAL_GPIO_Init+0x324>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001042:	4a31      	ldr	r2, [pc, #196]	; (8001108 <HAL_GPIO_Init+0x324>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <HAL_GPIO_Init+0x324>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <HAL_GPIO_Init+0x324>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001072:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_GPIO_Init+0x324>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_GPIO_Init+0x324>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_GPIO_Init+0x324>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c0:	4a11      	ldr	r2, [pc, #68]	; (8001108 <HAL_GPIO_Init+0x324>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	f67f ae96 	bls.w	8000e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40013800 	.word	0x40013800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	40021400 	.word	0x40021400
 8001104:	40021800 	.word	0x40021800
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e001      	b.n	800112e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001180:	887a      	ldrh	r2, [r7, #2]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4013      	ands	r3, r2
 8001186:	041a      	lsls	r2, r3, #16
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43d9      	mvns	r1, r3
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	400b      	ands	r3, r1
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a4:	b08f      	sub	sp, #60	; 0x3c
 80011a6:	af0a      	add	r7, sp, #40	; 0x28
 80011a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e116      	b.n	80013e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d106      	bne.n	80011d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fbb8 	bl	8000944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fb81 	bl	80028fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	687e      	ldr	r6, [r7, #4]
 8001200:	466d      	mov	r5, sp
 8001202:	f106 0410 	add.w	r4, r6, #16
 8001206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001212:	e885 0003 	stmia.w	r5, {r0, r1}
 8001216:	1d33      	adds	r3, r6, #4
 8001218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f001 fb0c 	bl	8002838 <USB_CoreInit>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2202      	movs	r2, #2
 800122a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0d7      	b.n	80013e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fb6f 	bl	800291c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e04a      	b.n	80012da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	333d      	adds	r3, #61	; 0x3d
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	333c      	adds	r3, #60	; 0x3c
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	b298      	uxth	r0, r3
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	3344      	adds	r3, #68	; 0x44
 8001280:	4602      	mov	r2, r0
 8001282:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	3340      	adds	r3, #64	; 0x40
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4413      	add	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	3348      	adds	r3, #72	; 0x48
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	334c      	adds	r3, #76	; 0x4c
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	3354      	adds	r3, #84	; 0x54
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	3301      	adds	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	7bfa      	ldrb	r2, [r7, #15]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d3af      	bcc.n	8001244 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e044      	b.n	8001374 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4413      	add	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	3301      	adds	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3b5      	bcc.n	80012ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	687e      	ldr	r6, [r7, #4]
 8001386:	466d      	mov	r5, sp
 8001388:	f106 0410 	add.w	r4, r6, #16
 800138c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001394:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001398:	e885 0003 	stmia.w	r5, {r0, r1}
 800139c:	1d33      	adds	r3, r6, #4
 800139e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a0:	6838      	ldr	r0, [r7, #0]
 80013a2:	f001 fb07 	bl	80029b4 <USB_DevInit>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2202      	movs	r2, #2
 80013b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e014      	b.n	80013e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d102      	bne.n	80013d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f80a 	bl	80013ea <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fcc5 	bl	8002d6a <USB_DevDisconnect>

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	f043 0303 	orr.w	r3, r3, #3
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0cc      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d90c      	bls.n	8001470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0b8      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	494d      	ldr	r1, [pc, #308]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d044      	beq.n	8001554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d119      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e07f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d003      	beq.n	80014f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e06f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e067      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4934      	ldr	r1, [pc, #208]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001524:	f7ff fb48 	bl	8000bb8 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff fb44 	bl	8000bb8 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e04f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d20c      	bcs.n	800157c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e032      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ba:	f000 f821 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	490a      	ldr	r1, [pc, #40]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	5ccb      	ldrb	r3, [r1, r3]
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1c8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff faa8 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023c00 	.word	0x40023c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	08002ea0 	.word	0x08002ea0
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001604:	b094      	sub	sp, #80	; 0x50
 8001606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
 800160c:	2300      	movs	r3, #0
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001610:	2300      	movs	r3, #0
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001618:	4b79      	ldr	r3, [pc, #484]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b08      	cmp	r3, #8
 8001622:	d00d      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0x40>
 8001624:	2b08      	cmp	r3, #8
 8001626:	f200 80e1 	bhi.w	80017ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0x34>
 800162e:	2b04      	cmp	r3, #4
 8001630:	d003      	beq.n	800163a <HAL_RCC_GetSysClockFreq+0x3a>
 8001632:	e0db      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001634:	4b73      	ldr	r3, [pc, #460]	; (8001804 <HAL_RCC_GetSysClockFreq+0x204>)
 8001636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001638:	e0db      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <HAL_RCC_GetSysClockFreq+0x208>)
 800163c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800163e:	e0d8      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001640:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800164a:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d063      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001656:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	099b      	lsrs	r3, r3, #6
 800165c:	2200      	movs	r2, #0
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
 800166a:	2300      	movs	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
 800166e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001672:	4622      	mov	r2, r4
 8001674:	462b      	mov	r3, r5
 8001676:	f04f 0000 	mov.w	r0, #0
 800167a:	f04f 0100 	mov.w	r1, #0
 800167e:	0159      	lsls	r1, r3, #5
 8001680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001684:	0150      	lsls	r0, r2, #5
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4621      	mov	r1, r4
 800168c:	1a51      	subs	r1, r2, r1
 800168e:	6139      	str	r1, [r7, #16]
 8001690:	4629      	mov	r1, r5
 8001692:	eb63 0301 	sbc.w	r3, r3, r1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016a4:	4659      	mov	r1, fp
 80016a6:	018b      	lsls	r3, r1, #6
 80016a8:	4651      	mov	r1, sl
 80016aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ae:	4651      	mov	r1, sl
 80016b0:	018a      	lsls	r2, r1, #6
 80016b2:	4651      	mov	r1, sl
 80016b4:	ebb2 0801 	subs.w	r8, r2, r1
 80016b8:	4659      	mov	r1, fp
 80016ba:	eb63 0901 	sbc.w	r9, r3, r1
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d2:	4690      	mov	r8, r2
 80016d4:	4699      	mov	r9, r3
 80016d6:	4623      	mov	r3, r4
 80016d8:	eb18 0303 	adds.w	r3, r8, r3
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	462b      	mov	r3, r5
 80016e0:	eb49 0303 	adc.w	r3, r9, r3
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016f2:	4629      	mov	r1, r5
 80016f4:	024b      	lsls	r3, r1, #9
 80016f6:	4621      	mov	r1, r4
 80016f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016fc:	4621      	mov	r1, r4
 80016fe:	024a      	lsls	r2, r1, #9
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001706:	2200      	movs	r2, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
 800170a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800170c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001710:	f7fe fd82 	bl	8000218 <__aeabi_uldivmod>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4613      	mov	r3, r2
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800171c:	e058      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	099b      	lsrs	r3, r3, #6
 8001724:	2200      	movs	r2, #0
 8001726:	4618      	mov	r0, r3
 8001728:	4611      	mov	r1, r2
 800172a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
 8001734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001738:	4642      	mov	r2, r8
 800173a:	464b      	mov	r3, r9
 800173c:	f04f 0000 	mov.w	r0, #0
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	0159      	lsls	r1, r3, #5
 8001746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800174a:	0150      	lsls	r0, r2, #5
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4641      	mov	r1, r8
 8001752:	ebb2 0a01 	subs.w	sl, r2, r1
 8001756:	4649      	mov	r1, r9
 8001758:	eb63 0b01 	sbc.w	fp, r3, r1
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800176c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001770:	ebb2 040a 	subs.w	r4, r2, sl
 8001774:	eb63 050b 	sbc.w	r5, r3, fp
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	00eb      	lsls	r3, r5, #3
 8001782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001786:	00e2      	lsls	r2, r4, #3
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	4643      	mov	r3, r8
 800178e:	18e3      	adds	r3, r4, r3
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	464b      	mov	r3, r9
 8001794:	eb45 0303 	adc.w	r3, r5, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017a6:	4629      	mov	r1, r5
 80017a8:	028b      	lsls	r3, r1, #10
 80017aa:	4621      	mov	r1, r4
 80017ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b0:	4621      	mov	r1, r4
 80017b2:	028a      	lsls	r2, r1, #10
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ba:	2200      	movs	r2, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	61fa      	str	r2, [r7, #28]
 80017c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c4:	f7fe fd28 	bl	8000218 <__aeabi_uldivmod>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4613      	mov	r3, r2
 80017ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	3301      	adds	r3, #1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80017e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017ea:	e002      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_RCC_GetSysClockFreq+0x204>)
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3750      	adds	r7, #80	; 0x50
 80017f8:	46bd      	mov	sp, r7
 80017fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	00f42400 	.word	0x00f42400
 8001808:	007a1200 	.word	0x007a1200

0800180c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_RCC_GetHCLKFreq+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000000 	.word	0x20000000

08001824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001828:	f7ff fff0 	bl	800180c <HAL_RCC_GetHCLKFreq>
 800182c:	4602      	mov	r2, r0
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	0a9b      	lsrs	r3, r3, #10
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	4903      	ldr	r1, [pc, #12]	; (8001848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800183a:	5ccb      	ldrb	r3, [r1, r3]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001840:	4618      	mov	r0, r3
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	08002eb0 	.word	0x08002eb0

0800184c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001850:	f7ff ffdc 	bl	800180c <HAL_RCC_GetHCLKFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	0b5b      	lsrs	r3, r3, #13
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	4903      	ldr	r1, [pc, #12]	; (8001870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	08002eb0 	.word	0x08002eb0

08001874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d010      	beq.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001898:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800189a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800189e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4977      	ldr	r1, [pc, #476]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d010      	beq.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80018c6:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018cc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	496b      	ldr	r1, [pc, #428]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d022      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80018f4:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001902:	4960      	ldr	r1, [pc, #384]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001904:	4313      	orrs	r3, r2
 8001906:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001912:	2301      	movs	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800191e:	d10c      	bne.n	800193a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001920:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001926:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	3b01      	subs	r3, #1
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	4954      	ldr	r1, [pc, #336]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001934:	4313      	orrs	r3, r2
 8001936:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d022      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001946:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800194c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001954:	494b      	ldr	r1, [pc, #300]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001956:	4313      	orrs	r3, r2
 8001958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001964:	2301      	movs	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001970:	d10c      	bne.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001972:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001978:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	3b01      	subs	r3, #1
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	493f      	ldr	r1, [pc, #252]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001986:	4313      	orrs	r3, r2
 8001988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 808a 	beq.w	8001aae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a38      	ldr	r2, [pc, #224]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a33      	ldr	r2, [pc, #204]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019c2:	f7ff f8f9 	bl	8000bb8 <HAL_GetTick>
 80019c6:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff f8f5 	bl	8000bb8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1d1      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f0:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d02f      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d028      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a0e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d114      	bne.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f8c3 	bl	8000bb8 <HAL_GetTick>
 8001a32:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff f8bf 	bl	8000bb8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e199      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a64:	d114      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a7a:	4902      	ldr	r1, [pc, #8]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
 8001a80:	e00c      	b.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	42470e40 	.word	0x42470e40
 8001a90:	4b89      	ldr	r3, [pc, #548]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a88      	ldr	r2, [pc, #544]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001a96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a9a:	6093      	str	r3, [r2, #8]
 8001a9c:	4b86      	ldr	r3, [pc, #536]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001a9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa8:	4983      	ldr	r1, [pc, #524]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001ac2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00a      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001ad0:	4b79      	ldr	r3, [pc, #484]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	4976      	ldr	r1, [pc, #472]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d011      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001af2:	4b71      	ldr	r3, [pc, #452]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	496d      	ldr	r1, [pc, #436]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b10:	d101      	bne.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00a      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001b22:	4b65      	ldr	r3, [pc, #404]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b28:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	4961      	ldr	r1, [pc, #388]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d004      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b80      	cmp	r3, #128	; 0x80
 8001b44:	f040 80c6 	bne.w	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b48:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b4e:	f7ff f833 	bl	8000bb8 <HAL_GetTick>
 8001b52:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b56:	f7ff f82f 	bl	8000bb8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e10b      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001b74:	4a53      	ldr	r2, [pc, #332]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d019      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d019      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d115      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bd6:	d110      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	019b      	lsls	r3, r3, #6
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	071b      	lsls	r3, r3, #28
 8001bf2:	4931      	ldr	r1, [pc, #196]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d026      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d122      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c28:	0e1b      	lsrs	r3, r3, #24
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	061b      	lsls	r3, r3, #24
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	071b      	lsls	r3, r3, #28
 8001c48:	491b      	ldr	r1, [pc, #108]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c56:	f023 021f 	bic.w	r2, r3, #31
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	4915      	ldr	r1, [pc, #84]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d010      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	019b      	lsls	r3, r3, #6
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	061b      	lsls	r3, r3, #24
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	071b      	lsls	r3, r3, #28
 8001c8e:	490a      	ldr	r1, [pc, #40]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7fe ff8c 	bl	8000bb8 <HAL_GetTick>
 8001ca0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ca2:	e011      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ca4:	f7fe ff88 	bl	8000bb8 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d90a      	bls.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e064      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	424711e0 	.word	0x424711e0
 8001cc0:	42470068 	.word	0x42470068
 8001cc4:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0e7      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ce0:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ce6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	4926      	ldr	r1, [pc, #152]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d08:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	491d      	ldr	r1, [pc, #116]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d32:	4915      	ldr	r1, [pc, #84]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d4c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4904      	ldr	r1, [pc, #16]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e273      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d075      	beq.n	8001e96 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001daa:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d00c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db6:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d112      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc2:	4b82      	ldr	r3, [pc, #520]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dce:	d10b      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	4b7e      	ldr	r3, [pc, #504]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d05b      	beq.n	8001e94 <HAL_RCC_OscConfig+0x108>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d157      	bne.n	8001e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e24e      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x74>
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e01d      	b.n	8001e3c <HAL_RCC_OscConfig+0xb0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x98>
 8001e0a:	4b70      	ldr	r3, [pc, #448]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a6f      	ldr	r2, [pc, #444]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b6d      	ldr	r3, [pc, #436]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6c      	ldr	r2, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xb0>
 8001e24:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a65      	ldr	r2, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe feb8 	bl	8000bb8 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7fe feb4 	bl	8000bb8 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e213      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0xc0>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe fea4 	bl	8000bb8 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e74:	f7fe fea0 	bl	8000bb8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1ff      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0xe8>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d063      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d11c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eba:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d116      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_RCC_OscConfig+0x152>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e1d3      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4937      	ldr	r1, [pc, #220]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	e03a      	b.n	8001f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <HAL_RCC_OscConfig+0x244>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7fe fe59 	bl	8000bb8 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7fe fe55 	bl	8000bb8 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1b4      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4925      	ldr	r1, [pc, #148]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_RCC_OscConfig+0x244>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7fe fe38 	bl	8000bb8 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4c:	f7fe fe34 	bl	8000bb8 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e193      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d036      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_RCC_OscConfig+0x248>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7fe fe18 	bl	8000bb8 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7fe fe14 	bl	8000bb8 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e173      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_OscConfig+0x240>)
 8001fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x200>
 8001faa:	e01b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_OscConfig+0x248>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb2:	f7fe fe01 	bl	8000bb8 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	e00e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fba:	f7fe fdfd 	bl	8000bb8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d907      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e15c      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	42470000 	.word	0x42470000
 8001fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd8:	4b8a      	ldr	r3, [pc, #552]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8001fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ea      	bne.n	8001fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8097 	beq.w	8002120 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff6:	4b83      	ldr	r3, [pc, #524]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	4b7f      	ldr	r3, [pc, #508]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a7e      	ldr	r2, [pc, #504]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201e:	2301      	movs	r3, #1
 8002020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	4b79      	ldr	r3, [pc, #484]	; (8002208 <HAL_RCC_OscConfig+0x47c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d118      	bne.n	8002060 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202e:	4b76      	ldr	r3, [pc, #472]	; (8002208 <HAL_RCC_OscConfig+0x47c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a75      	ldr	r2, [pc, #468]	; (8002208 <HAL_RCC_OscConfig+0x47c>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7fe fdbd 	bl	8000bb8 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7fe fdb9 	bl	8000bb8 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e118      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	4b6c      	ldr	r3, [pc, #432]	; (8002208 <HAL_RCC_OscConfig+0x47c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x2ea>
 8002068:	4b66      	ldr	r3, [pc, #408]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	4a65      	ldr	r2, [pc, #404]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6713      	str	r3, [r2, #112]	; 0x70
 8002074:	e01c      	b.n	80020b0 <HAL_RCC_OscConfig+0x324>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b05      	cmp	r3, #5
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x30c>
 800207e:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a60      	ldr	r2, [pc, #384]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
 800208a:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a5d      	ldr	r2, [pc, #372]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0x324>
 8002098:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a59      	ldr	r2, [pc, #356]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
 80020a4:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	4a56      	ldr	r2, [pc, #344]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d015      	beq.n	80020e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7fe fd7e 	bl	8000bb8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7fe fd7a 	bl	8000bb8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0d7      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d6:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0ee      	beq.n	80020c0 <HAL_RCC_OscConfig+0x334>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7fe fd68 	bl	8000bb8 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7fe fd64 	bl	8000bb8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e0c1      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	4b40      	ldr	r3, [pc, #256]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ee      	bne.n	80020ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800210e:	7dfb      	ldrb	r3, [r7, #23]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	4a3a      	ldr	r2, [pc, #232]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 800211a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80ad 	beq.w	8002284 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800212a:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b08      	cmp	r3, #8
 8002134:	d060      	beq.n	80021f8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d145      	bne.n	80021ca <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b33      	ldr	r3, [pc, #204]	; (800220c <HAL_RCC_OscConfig+0x480>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fd38 	bl	8000bb8 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe fd34 	bl	8000bb8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e093      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	041b      	lsls	r3, r3, #16
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	071b      	lsls	r3, r3, #28
 8002196:	491b      	ldr	r1, [pc, #108]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x480>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7fe fd09 	bl	8000bb8 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021aa:	f7fe fd05 	bl	8000bb8 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e064      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x41e>
 80021c8:	e05c      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_OscConfig+0x480>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fcf2 	bl	8000bb8 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe fcee 	bl	8000bb8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e04d      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_OscConfig+0x478>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x44c>
 80021f6:	e045      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e040      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
 8002204:	40023800 	.word	0x40023800
 8002208:	40007000 	.word	0x40007000
 800220c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_RCC_OscConfig+0x504>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d030      	beq.n	8002280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d129      	bne.n	8002280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d122      	bne.n	8002280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002248:	4293      	cmp	r3, r2
 800224a:	d119      	bne.n	8002280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	3b01      	subs	r3, #1
 800225a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d10f      	bne.n	8002280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e03f      	b.n	8002326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fafa 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	; 0x24
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f829 	bl	8002330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800230c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002334:	b0c0      	sub	sp, #256	; 0x100
 8002336:	af00      	add	r7, sp, #0
 8002338:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	ea40 0301 	orr.w	r3, r0, r1
 8002358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800235a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	431a      	orrs	r2, r3
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	431a      	orrs	r2, r3
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002388:	f021 010c 	bic.w	r1, r1, #12
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002396:	430b      	orrs	r3, r1
 8002398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800239a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023aa:	6999      	ldr	r1, [r3, #24]
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	ea40 0301 	orr.w	r3, r0, r1
 80023b6:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b95      	ldr	r3, [pc, #596]	; (8002614 <UART_SetConfig+0x2e4>)
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d011      	beq.n	80023e8 <UART_SetConfig+0xb8>
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b93      	ldr	r3, [pc, #588]	; (8002618 <UART_SetConfig+0x2e8>)
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d00b      	beq.n	80023e8 <UART_SetConfig+0xb8>
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b91      	ldr	r3, [pc, #580]	; (800261c <UART_SetConfig+0x2ec>)
 80023d8:	429a      	cmp	r2, r3
 80023da:	d005      	beq.n	80023e8 <UART_SetConfig+0xb8>
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b8f      	ldr	r3, [pc, #572]	; (8002620 <UART_SetConfig+0x2f0>)
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d104      	bne.n	80023f2 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023e8:	f7ff fa30 	bl	800184c <HAL_RCC_GetPCLK2Freq>
 80023ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023f0:	e003      	b.n	80023fa <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023f2:	f7ff fa17 	bl	8001824 <HAL_RCC_GetPCLK1Freq>
 80023f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002404:	f040 8110 	bne.w	8002628 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800240c:	2200      	movs	r2, #0
 800240e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002412:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800241a:	4622      	mov	r2, r4
 800241c:	462b      	mov	r3, r5
 800241e:	1891      	adds	r1, r2, r2
 8002420:	65b9      	str	r1, [r7, #88]	; 0x58
 8002422:	415b      	adcs	r3, r3
 8002424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800242a:	4621      	mov	r1, r4
 800242c:	eb12 0801 	adds.w	r8, r2, r1
 8002430:	4629      	mov	r1, r5
 8002432:	eb43 0901 	adc.w	r9, r3, r1
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800244a:	4690      	mov	r8, r2
 800244c:	4699      	mov	r9, r3
 800244e:	4623      	mov	r3, r4
 8002450:	eb18 0303 	adds.w	r3, r8, r3
 8002454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002458:	462b      	mov	r3, r5
 800245a:	eb49 0303 	adc.w	r3, r9, r3
 800245e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800246e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002476:	460b      	mov	r3, r1
 8002478:	18db      	adds	r3, r3, r3
 800247a:	653b      	str	r3, [r7, #80]	; 0x50
 800247c:	4613      	mov	r3, r2
 800247e:	eb42 0303 	adc.w	r3, r2, r3
 8002482:	657b      	str	r3, [r7, #84]	; 0x54
 8002484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800248c:	f7fd fec4 	bl	8000218 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4b63      	ldr	r3, [pc, #396]	; (8002624 <UART_SetConfig+0x2f4>)
 8002496:	fba3 2302 	umull	r2, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	011c      	lsls	r4, r3, #4
 800249e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024b0:	4642      	mov	r2, r8
 80024b2:	464b      	mov	r3, r9
 80024b4:	1891      	adds	r1, r2, r2
 80024b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80024b8:	415b      	adcs	r3, r3
 80024ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024c0:	4641      	mov	r1, r8
 80024c2:	eb12 0a01 	adds.w	sl, r2, r1
 80024c6:	4649      	mov	r1, r9
 80024c8:	eb43 0b01 	adc.w	fp, r3, r1
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e0:	4692      	mov	sl, r2
 80024e2:	469b      	mov	fp, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	eb1a 0303 	adds.w	r3, sl, r3
 80024ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024ee:	464b      	mov	r3, r9
 80024f0:	eb4b 0303 	adc.w	r3, fp, r3
 80024f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800250c:	460b      	mov	r3, r1
 800250e:	18db      	adds	r3, r3, r3
 8002510:	643b      	str	r3, [r7, #64]	; 0x40
 8002512:	4613      	mov	r3, r2
 8002514:	eb42 0303 	adc.w	r3, r2, r3
 8002518:	647b      	str	r3, [r7, #68]	; 0x44
 800251a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800251e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002522:	f7fd fe79 	bl	8000218 <__aeabi_uldivmod>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4611      	mov	r1, r2
 800252c:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <UART_SetConfig+0x2f4>)
 800252e:	fba3 2301 	umull	r2, r3, r3, r1
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2264      	movs	r2, #100	; 0x64
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	1acb      	subs	r3, r1, r3
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <UART_SetConfig+0x2f4>)
 8002544:	fba3 2302 	umull	r2, r3, r3, r2
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002550:	441c      	add	r4, r3
 8002552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002556:	2200      	movs	r2, #0
 8002558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800255c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002564:	4642      	mov	r2, r8
 8002566:	464b      	mov	r3, r9
 8002568:	1891      	adds	r1, r2, r2
 800256a:	63b9      	str	r1, [r7, #56]	; 0x38
 800256c:	415b      	adcs	r3, r3
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002574:	4641      	mov	r1, r8
 8002576:	1851      	adds	r1, r2, r1
 8002578:	6339      	str	r1, [r7, #48]	; 0x30
 800257a:	4649      	mov	r1, r9
 800257c:	414b      	adcs	r3, r1
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800258c:	4659      	mov	r1, fp
 800258e:	00cb      	lsls	r3, r1, #3
 8002590:	4651      	mov	r1, sl
 8002592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002596:	4651      	mov	r1, sl
 8002598:	00ca      	lsls	r2, r1, #3
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	4642      	mov	r2, r8
 80025a2:	189b      	adds	r3, r3, r2
 80025a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025a8:	464b      	mov	r3, r9
 80025aa:	460a      	mov	r2, r1
 80025ac:	eb42 0303 	adc.w	r3, r2, r3
 80025b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025c8:	460b      	mov	r3, r1
 80025ca:	18db      	adds	r3, r3, r3
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ce:	4613      	mov	r3, r2
 80025d0:	eb42 0303 	adc.w	r3, r2, r3
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025de:	f7fd fe1b 	bl	8000218 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <UART_SetConfig+0x2f4>)
 80025e8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	2164      	movs	r1, #100	; 0x64
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	3332      	adds	r3, #50	; 0x32
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <UART_SetConfig+0x2f4>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	f003 0207 	and.w	r2, r3, #7
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4422      	add	r2, r4
 800260e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002610:	e109      	b.n	8002826 <UART_SetConfig+0x4f6>
 8002612:	bf00      	nop
 8002614:	40011000 	.word	0x40011000
 8002618:	40011400 	.word	0x40011400
 800261c:	40011800 	.word	0x40011800
 8002620:	40011c00 	.word	0x40011c00
 8002624:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800262c:	2200      	movs	r2, #0
 800262e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002632:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002636:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800263a:	4642      	mov	r2, r8
 800263c:	464b      	mov	r3, r9
 800263e:	1891      	adds	r1, r2, r2
 8002640:	6239      	str	r1, [r7, #32]
 8002642:	415b      	adcs	r3, r3
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800264a:	4641      	mov	r1, r8
 800264c:	1854      	adds	r4, r2, r1
 800264e:	4649      	mov	r1, r9
 8002650:	eb43 0501 	adc.w	r5, r3, r1
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	00eb      	lsls	r3, r5, #3
 800265e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002662:	00e2      	lsls	r2, r4, #3
 8002664:	4614      	mov	r4, r2
 8002666:	461d      	mov	r5, r3
 8002668:	4643      	mov	r3, r8
 800266a:	18e3      	adds	r3, r4, r3
 800266c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002670:	464b      	mov	r3, r9
 8002672:	eb45 0303 	adc.w	r3, r5, r3
 8002676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002696:	4629      	mov	r1, r5
 8002698:	008b      	lsls	r3, r1, #2
 800269a:	4621      	mov	r1, r4
 800269c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a0:	4621      	mov	r1, r4
 80026a2:	008a      	lsls	r2, r1, #2
 80026a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026a8:	f7fd fdb6 	bl	8000218 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4b60      	ldr	r3, [pc, #384]	; (8002834 <UART_SetConfig+0x504>)
 80026b2:	fba3 2302 	umull	r2, r3, r3, r2
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	011c      	lsls	r4, r3, #4
 80026ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026cc:	4642      	mov	r2, r8
 80026ce:	464b      	mov	r3, r9
 80026d0:	1891      	adds	r1, r2, r2
 80026d2:	61b9      	str	r1, [r7, #24]
 80026d4:	415b      	adcs	r3, r3
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026dc:	4641      	mov	r1, r8
 80026de:	1851      	adds	r1, r2, r1
 80026e0:	6139      	str	r1, [r7, #16]
 80026e2:	4649      	mov	r1, r9
 80026e4:	414b      	adcs	r3, r1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f4:	4659      	mov	r1, fp
 80026f6:	00cb      	lsls	r3, r1, #3
 80026f8:	4651      	mov	r1, sl
 80026fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026fe:	4651      	mov	r1, sl
 8002700:	00ca      	lsls	r2, r1, #3
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	4603      	mov	r3, r0
 8002708:	4642      	mov	r2, r8
 800270a:	189b      	adds	r3, r3, r2
 800270c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002710:	464b      	mov	r3, r9
 8002712:	460a      	mov	r2, r1
 8002714:	eb42 0303 	adc.w	r3, r2, r3
 8002718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	67bb      	str	r3, [r7, #120]	; 0x78
 8002726:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002734:	4649      	mov	r1, r9
 8002736:	008b      	lsls	r3, r1, #2
 8002738:	4641      	mov	r1, r8
 800273a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800273e:	4641      	mov	r1, r8
 8002740:	008a      	lsls	r2, r1, #2
 8002742:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002746:	f7fd fd67 	bl	8000218 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <UART_SetConfig+0x504>)
 8002750:	fba3 1302 	umull	r1, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	2164      	movs	r1, #100	; 0x64
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	3332      	adds	r3, #50	; 0x32
 8002762:	4a34      	ldr	r2, [pc, #208]	; (8002834 <UART_SetConfig+0x504>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276e:	441c      	add	r4, r3
 8002770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002774:	2200      	movs	r2, #0
 8002776:	673b      	str	r3, [r7, #112]	; 0x70
 8002778:	677a      	str	r2, [r7, #116]	; 0x74
 800277a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800277e:	4642      	mov	r2, r8
 8002780:	464b      	mov	r3, r9
 8002782:	1891      	adds	r1, r2, r2
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	415b      	adcs	r3, r3
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800278e:	4641      	mov	r1, r8
 8002790:	1851      	adds	r1, r2, r1
 8002792:	6039      	str	r1, [r7, #0]
 8002794:	4649      	mov	r1, r9
 8002796:	414b      	adcs	r3, r1
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027a6:	4659      	mov	r1, fp
 80027a8:	00cb      	lsls	r3, r1, #3
 80027aa:	4651      	mov	r1, sl
 80027ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b0:	4651      	mov	r1, sl
 80027b2:	00ca      	lsls	r2, r1, #3
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	4603      	mov	r3, r0
 80027ba:	4642      	mov	r2, r8
 80027bc:	189b      	adds	r3, r3, r2
 80027be:	66bb      	str	r3, [r7, #104]	; 0x68
 80027c0:	464b      	mov	r3, r9
 80027c2:	460a      	mov	r2, r1
 80027c4:	eb42 0303 	adc.w	r3, r2, r3
 80027c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	663b      	str	r3, [r7, #96]	; 0x60
 80027d4:	667a      	str	r2, [r7, #100]	; 0x64
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027e2:	4649      	mov	r1, r9
 80027e4:	008b      	lsls	r3, r1, #2
 80027e6:	4641      	mov	r1, r8
 80027e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ec:	4641      	mov	r1, r8
 80027ee:	008a      	lsls	r2, r1, #2
 80027f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027f4:	f7fd fd10 	bl	8000218 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <UART_SetConfig+0x504>)
 80027fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2164      	movs	r1, #100	; 0x64
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	; 0x32
 8002810:	4a08      	ldr	r2, [pc, #32]	; (8002834 <UART_SetConfig+0x504>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	f003 020f 	and.w	r2, r3, #15
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4422      	add	r2, r4
 8002824:	609a      	str	r2, [r3, #8]
}
 8002826:	bf00      	nop
 8002828:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800282c:	46bd      	mov	sp, r7
 800282e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002832:	bf00      	nop
 8002834:	51eb851f 	.word	0x51eb851f

08002838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002838:	b084      	sub	sp, #16
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	f107 001c 	add.w	r0, r7, #28
 8002846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	2b01      	cmp	r3, #1
 800284e:	d122      	bne.n	8002896 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa9c 	bl	8002dc8 <USB_CoreReset>
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e01a      	b.n	80028cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa90 	bl	8002dc8 <USB_CoreReset>
 80028a8:	4603      	mov	r3, r0
 80028aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80028ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38
 80028be:	e005      	b.n	80028cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10b      	bne.n	80028ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f043 0206 	orr.w	r2, r3, #6
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028f6:	b004      	add	sp, #16
 80028f8:	4770      	bx	lr

080028fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 0201 	bic.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d115      	bne.n	800296a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800294a:	2001      	movs	r0, #1
 800294c:	f7fe f940 	bl	8000bd0 <HAL_Delay>
      ms++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3301      	adds	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa28 	bl	8002dac <USB_GetMode>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d01e      	beq.n	80029a0 <USB_SetCurrentMode+0x84>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b31      	cmp	r3, #49	; 0x31
 8002966:	d9f0      	bls.n	800294a <USB_SetCurrentMode+0x2e>
 8002968:	e01a      	b.n	80029a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d115      	bne.n	800299c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800297c:	2001      	movs	r0, #1
 800297e:	f7fe f927 	bl	8000bd0 <HAL_Delay>
      ms++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3301      	adds	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fa0f 	bl	8002dac <USB_GetMode>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <USB_SetCurrentMode+0x84>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b31      	cmp	r3, #49	; 0x31
 8002998:	d9f0      	bls.n	800297c <USB_SetCurrentMode+0x60>
 800299a:	e001      	b.n	80029a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e005      	b.n	80029ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b32      	cmp	r3, #50	; 0x32
 80029a4:	d101      	bne.n	80029aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029b4:	b084      	sub	sp, #16
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80029c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	e009      	b.n	80029e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	3340      	adds	r3, #64	; 0x40
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	3301      	adds	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b0e      	cmp	r3, #14
 80029ec:	d9f2      	bls.n	80029d4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80029ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d11c      	bne.n	8002a2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a02:	f043 0302 	orr.w	r3, r3, #2
 8002a06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e005      	b.n	8002a3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002a40:	461a      	mov	r2, r3
 8002a42:	2300      	movs	r3, #0
 8002a44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a54:	461a      	mov	r2, r3
 8002a56:	680b      	ldr	r3, [r1, #0]
 8002a58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10c      	bne.n	8002a7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a66:	2100      	movs	r1, #0
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f965 	bl	8002d38 <USB_SetDevSpeed>
 8002a6e:	e008      	b.n	8002a82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a70:	2101      	movs	r1, #1
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f960 	bl	8002d38 <USB_SetDevSpeed>
 8002a78:	e003      	b.n	8002a82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f95b 	bl	8002d38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a82:	2110      	movs	r1, #16
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8f3 	bl	8002c70 <USB_FlushTxFifo>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f91f 	bl	8002cd8 <USB_FlushRxFifo>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2300      	movs	r3, #0
 8002aae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e043      	b.n	8002b56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ae4:	d118      	bne.n	8002b18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af8:	461a      	mov	r2, r3
 8002afa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e013      	b.n	8002b2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e008      	b.n	8002b2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b24:	461a      	mov	r2, r3
 8002b26:	2300      	movs	r3, #0
 8002b28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b36:	461a      	mov	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	3301      	adds	r3, #1
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d3b7      	bcc.n	8002ace <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e043      	b.n	8002bec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b7a:	d118      	bne.n	8002bae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e013      	b.n	8002bc0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e008      	b.n	8002bc0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2300      	movs	r3, #0
 8002bd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bde:	461a      	mov	r2, r3
 8002be0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002be4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	3301      	adds	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d3b7      	bcc.n	8002b64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f043 0210 	orr.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <USB_DevInit+0x2b8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f043 0208 	orr.w	r2, r3, #8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d107      	bne.n	8002c5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c68:	b004      	add	sp, #16
 8002c6a:	4770      	bx	lr
 8002c6c:	803c3800 	.word	0x803c3800

08002c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <USB_FlushTxFifo+0x64>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e01b      	b.n	8002cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	daf2      	bge.n	8002c7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	019b      	lsls	r3, r3, #6
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <USB_FlushTxFifo+0x64>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e006      	b.n	8002cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d0f0      	beq.n	8002ca8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	00030d40 	.word	0x00030d40

08002cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <USB_FlushRxFifo+0x5c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e018      	b.n	8002d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	daf2      	bge.n	8002ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2210      	movs	r2, #16
 8002d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <USB_FlushRxFifo+0x5c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e006      	b.n	8002d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d0f0      	beq.n	8002d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	00030d40 	.word	0x00030d40

08002d38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002d84:	f023 0303 	bic.w	r3, r3, #3
 8002d88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0301 	and.w	r3, r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <USB_CoreReset+0x64>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e01b      	b.n	8002e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	daf2      	bge.n	8002dd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3301      	adds	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <USB_CoreReset+0x64>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e006      	b.n	8002e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d0f0      	beq.n	8002dfe <USB_CoreReset+0x36>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	00030d40 	.word	0x00030d40

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4d0d      	ldr	r5, [pc, #52]	; (8002e68 <__libc_init_array+0x38>)
 8002e34:	4c0d      	ldr	r4, [pc, #52]	; (8002e6c <__libc_init_array+0x3c>)
 8002e36:	1b64      	subs	r4, r4, r5
 8002e38:	10a4      	asrs	r4, r4, #2
 8002e3a:	2600      	movs	r6, #0
 8002e3c:	42a6      	cmp	r6, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	4d0b      	ldr	r5, [pc, #44]	; (8002e70 <__libc_init_array+0x40>)
 8002e42:	4c0c      	ldr	r4, [pc, #48]	; (8002e74 <__libc_init_array+0x44>)
 8002e44:	f000 f820 	bl	8002e88 <_init>
 8002e48:	1b64      	subs	r4, r4, r5
 8002e4a:	10a4      	asrs	r4, r4, #2
 8002e4c:	2600      	movs	r6, #0
 8002e4e:	42a6      	cmp	r6, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e58:	4798      	blx	r3
 8002e5a:	3601      	adds	r6, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e62:	4798      	blx	r3
 8002e64:	3601      	adds	r6, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	08002ec0 	.word	0x08002ec0
 8002e6c:	08002ec0 	.word	0x08002ec0
 8002e70:	08002ec0 	.word	0x08002ec0
 8002e74:	08002ec4 	.word	0x08002ec4

08002e78 <memset>:
 8002e78:	4402      	add	r2, r0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <memset+0xa>
 8002e80:	4770      	bx	lr
 8002e82:	f803 1b01 	strb.w	r1, [r3], #1
 8002e86:	e7f9      	b.n	8002e7c <memset+0x4>

08002e88 <_init>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	bf00      	nop
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr

08002e94 <_fini>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	bf00      	nop
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr
