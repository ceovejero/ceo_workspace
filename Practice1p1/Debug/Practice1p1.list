
Practice1p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ccc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ebc  08002ebc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec4  08002ec4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000014  08002ee0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08002ee0  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8a1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c54  00000000  00000000  0002c8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002000c  00000000  00000000  0002f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0bb  00000000  00000000  0004f834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3b5f  00000000  00000000  0005b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f44e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000286c  00000000  00000000  0011f4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002e8c 	.word	0x08002e8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08002e8c 	.word	0x08002e8c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fafe 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f83e 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f902 	bl	8000730 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f8a6 	bl	800067c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000530:	f000 f8ce 	bl	80006d0 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, ledArray[ledPin]);
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <main+0x74>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b16      	ldr	r3, [pc, #88]	; (8000594 <main+0x78>)
 800053c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000540:	4619      	mov	r1, r3
 8000542:	4815      	ldr	r0, [pc, #84]	; (8000598 <main+0x7c>)
 8000544:	f000 fe15 	bl	8001172 <HAL_GPIO_TogglePin>
	  HAL_Delay(toggleTime);
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <main+0x80>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fb59 	bl	8000c04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, ledArray[ledPin]);
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <main+0x74>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <main+0x78>)
 800055a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800055e:	4619      	mov	r1, r3
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <main+0x7c>)
 8000562:	f000 fe06 	bl	8001172 <HAL_GPIO_TogglePin>
	  HAL_Delay(toggleTime);
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <main+0x80>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fb4a 	bl	8000c04 <HAL_Delay>
	  ledPin = (ledPin+1)%3;
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <main+0x74>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	1c5a      	adds	r2, r3, #1
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <main+0x84>)
 8000578:	fb83 3102 	smull	r3, r1, r3, r2
 800057c:	17d3      	asrs	r3, r2, #31
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	460b      	mov	r3, r1
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	440b      	add	r3, r1
 8000586:	1ad1      	subs	r1, r2, r3
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	4b01      	ldr	r3, [pc, #4]	; (8000590 <main+0x74>)
 800058c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, ledArray[ledPin]);
 800058e:	e7d1      	b.n	8000534 <main+0x18>
 8000590:	20000580 	.word	0x20000580
 8000594:	20000000 	.word	0x20000000
 8000598:	40020400 	.word	0x40020400
 800059c:	20000006 	.word	0x20000006
 80005a0:	55555556 	.word	0x55555556

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fc62 	bl	8002e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <SystemClock_Config+0xd0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <SystemClock_Config+0xd0>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <SystemClock_Config+0xd0>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <SystemClock_Config+0xd4>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000604:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000618:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800061c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000622:	2308      	movs	r3, #8
 8000624:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fbae 	bl	8001d90 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800063a:	f000 f927 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2103      	movs	r1, #3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 feec 	bl	8001438 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000666:	f000 f911 	bl	800088c <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART3_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART3_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART3_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART3_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART3_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART3_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART3_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART3_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART3_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART3_UART_Init+0x4c>)
 80006b4:	f001 fdf0 	bl	8002298 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f8e5 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000030 	.word	0x20000030
 80006cc:	40004800 	.word	0x40004800

080006d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006de:	2206      	movs	r2, #6
 80006e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006e4:	2202      	movs	r2, #2
 80006e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000708:	2201      	movs	r2, #1
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800070e:	2201      	movs	r2, #1
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800071a:	f000 fd44 	bl	80011a6 <HAL_PCD_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000724:	f000 f8b2 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000074 	.word	0x20000074

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b4c      	ldr	r3, [pc, #304]	; (800087c <MX_GPIO_Init+0x14c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a4b      	ldr	r2, [pc, #300]	; (800087c <MX_GPIO_Init+0x14c>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b49      	ldr	r3, [pc, #292]	; (800087c <MX_GPIO_Init+0x14c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <MX_GPIO_Init+0x14c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a44      	ldr	r2, [pc, #272]	; (800087c <MX_GPIO_Init+0x14c>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b42      	ldr	r3, [pc, #264]	; (800087c <MX_GPIO_Init+0x14c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b3e      	ldr	r3, [pc, #248]	; (800087c <MX_GPIO_Init+0x14c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a3d      	ldr	r2, [pc, #244]	; (800087c <MX_GPIO_Init+0x14c>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b3b      	ldr	r3, [pc, #236]	; (800087c <MX_GPIO_Init+0x14c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b37      	ldr	r3, [pc, #220]	; (800087c <MX_GPIO_Init+0x14c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a36      	ldr	r2, [pc, #216]	; (800087c <MX_GPIO_Init+0x14c>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b34      	ldr	r3, [pc, #208]	; (800087c <MX_GPIO_Init+0x14c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <MX_GPIO_Init+0x14c>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a28      	ldr	r2, [pc, #160]	; (800087c <MX_GPIO_Init+0x14c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4822      	ldr	r0, [pc, #136]	; (8000880 <MX_GPIO_Init+0x150>)
 80007f6:	f000 fca3 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4821      	ldr	r0, [pc, #132]	; (8000884 <MX_GPIO_Init+0x154>)
 8000800:	f000 fc9e 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_GPIO_Init+0x158>)
 800081c:	f000 fafc 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000820:	f244 0381 	movw	r3, #16513	; 0x4081
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_GPIO_Init+0x150>)
 800083a:	f000 faed 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0x154>)
 8000856:	f000 fadf 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_GPIO_Init+0x154>)
 800086e:	f000 fad3 	bl	8000e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	bf00      	nop
 8000874:	3730      	adds	r7, #48	; 0x30
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40021800 	.word	0x40021800
 8000888:	40020800 	.word	0x40020800

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_MspInit+0x84>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d12c      	bne.n	8000964 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000942:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000954:	2307      	movs	r3, #7
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_UART_MspInit+0x8c>)
 8000960:	f000 fa5a 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40004800 	.word	0x40004800
 8000970:	40023800 	.word	0x40023800
 8000974:	40020c00 	.word	0x40020c00

08000978 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0a0      	sub	sp, #128	; 0x80
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2258      	movs	r2, #88	; 0x58
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fa6f 	bl	8002e7c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009a6:	d14d      	bne.n	8000a44 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80009a8:	2320      	movs	r3, #32
 80009aa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80009ac:	2300      	movs	r3, #0
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 ff5f 	bl	8001878 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80009c0:	f7ff ff64 	bl	800088c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <HAL_PCD_MspInit+0xd4>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_PCD_MspInit+0xd4>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <HAL_PCD_MspInit+0xd4>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009f2:	230a      	movs	r3, #10
 80009f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009fa:	4619      	mov	r1, r3
 80009fc:	4814      	ldr	r0, [pc, #80]	; (8000a50 <HAL_PCD_MspInit+0xd8>)
 80009fe:	f000 fa0b 	bl	8000e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a14:	4619      	mov	r1, r3
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <HAL_PCD_MspInit+0xd8>)
 8000a18:	f000 f9fe 	bl	8000e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_PCD_MspInit+0xd4>)
 8000a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_PCD_MspInit+0xd4>)
 8000a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a26:	6353      	str	r3, [r2, #52]	; 0x34
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <HAL_PCD_MspInit+0xd4>)
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_PCD_MspInit+0xd4>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6453      	str	r3, [r2, #68]	; 0x44
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <HAL_PCD_MspInit+0xd4>)
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3780      	adds	r7, #128	; 0x80
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f890 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ad2:	490e      	ldr	r1, [pc, #56]	; (8000b0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae8:	4c0b      	ldr	r4, [pc, #44]	; (8000b18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af6:	f7ff ffd7 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f002 f99b 	bl	8002e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afe:	f7ff fd0d 	bl	800051c <main>
  bx  lr    
 8000b02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b10:	08002ecc 	.word	0x08002ecc
  ldr r2, =_sbss
 8000b14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b18:	20000588 	.word	0x20000588

08000b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <HAL_Init+0x40>)
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_Init+0x40>)
 8000b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_Init+0x40>)
 8000b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f931 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 f808 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b54:	f7ff fea0 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023c00 	.word	0x40023c00

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_InitTick+0x54>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x58>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f93b 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00e      	b.n	8000bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d80a      	bhi.n	8000bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f000 f911 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <HAL_InitTick+0x5c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000010 	.word	0x20000010
 8000bc0:	2000000c 	.word	0x2000000c

08000bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000010 	.word	0x20000010
 8000be8:	20000584 	.word	0x20000584

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000584 	.word	0x20000584

08000c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff ffee 	bl	8000bec <HAL_GetTick>
 8000c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1c:	d005      	beq.n	8000c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_Delay+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c2a:	bf00      	nop
 8000c2c:	f7ff ffde 	bl	8000bec <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d8f7      	bhi.n	8000c2c <HAL_Delay+0x28>
  {
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000010 	.word	0x20000010

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5c 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e165      	b.n	8001100 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8154 	bne.w	80010fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d017      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80ae 	beq.w	80010fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <HAL_GPIO_Init+0x300>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a5c      	ldr	r2, [pc, #368]	; (8001118 <HAL_GPIO_Init+0x300>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <HAL_GPIO_Init+0x300>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a58      	ldr	r2, [pc, #352]	; (800111c <HAL_GPIO_Init+0x304>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4f      	ldr	r2, [pc, #316]	; (8001120 <HAL_GPIO_Init+0x308>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d025      	beq.n	8001032 <HAL_GPIO_Init+0x21a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4e      	ldr	r2, [pc, #312]	; (8001124 <HAL_GPIO_Init+0x30c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01f      	beq.n	800102e <HAL_GPIO_Init+0x216>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4d      	ldr	r2, [pc, #308]	; (8001128 <HAL_GPIO_Init+0x310>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x212>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4c      	ldr	r2, [pc, #304]	; (800112c <HAL_GPIO_Init+0x314>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x20e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4b      	ldr	r2, [pc, #300]	; (8001130 <HAL_GPIO_Init+0x318>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x20a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4a      	ldr	r2, [pc, #296]	; (8001134 <HAL_GPIO_Init+0x31c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x206>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a49      	ldr	r2, [pc, #292]	; (8001138 <HAL_GPIO_Init+0x320>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x202>
 8001016:	2306      	movs	r3, #6
 8001018:	e00c      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800101a:	2307      	movs	r3, #7
 800101c:	e00a      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800101e:	2305      	movs	r3, #5
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 8001022:	2304      	movs	r3, #4
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x21c>
 8001032:	2300      	movs	r3, #0
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001044:	4935      	ldr	r1, [pc, #212]	; (800111c <HAL_GPIO_Init+0x304>)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <HAL_GPIO_Init+0x324>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001076:	4a31      	ldr	r2, [pc, #196]	; (800113c <HAL_GPIO_Init+0x324>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <HAL_GPIO_Init+0x324>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a0:	4a26      	ldr	r2, [pc, #152]	; (800113c <HAL_GPIO_Init+0x324>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a6:	4b25      	ldr	r3, [pc, #148]	; (800113c <HAL_GPIO_Init+0x324>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <HAL_GPIO_Init+0x324>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_GPIO_Init+0x324>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f4:	4a11      	ldr	r2, [pc, #68]	; (800113c <HAL_GPIO_Init+0x324>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f67f ae96 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40013800 	.word	0x40013800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40021400 	.word	0x40021400
 8001138:	40021800 	.word	0x40021800
 800113c:	40013c00 	.word	0x40013c00

08001140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
 800114c:	4613      	mov	r3, r2
 800114e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800115c:	e003      	b.n	8001166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	619a      	str	r2, [r3, #24]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	041a      	lsls	r2, r3, #16
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43d9      	mvns	r1, r3
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	400b      	ands	r3, r1
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a8:	b08f      	sub	sp, #60	; 0x3c
 80011aa:	af0a      	add	r7, sp, #40	; 0x28
 80011ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e116      	b.n	80013e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d106      	bne.n	80011d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fbd0 	bl	8000978 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2203      	movs	r2, #3
 80011dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fb81 	bl	80028fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	687e      	ldr	r6, [r7, #4]
 8001204:	466d      	mov	r5, sp
 8001206:	f106 0410 	add.w	r4, r6, #16
 800120a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001216:	e885 0003 	stmia.w	r5, {r0, r1}
 800121a:	1d33      	adds	r3, r6, #4
 800121c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f001 fb0c 	bl	800283c <USB_CoreInit>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2202      	movs	r2, #2
 800122e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e0d7      	b.n	80013e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fb6f 	bl	8002920 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	e04a      	b.n	80012de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	333d      	adds	r3, #61	; 0x3d
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	333c      	adds	r3, #60	; 0x3c
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	b298      	uxth	r0, r3
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	3344      	adds	r3, #68	; 0x44
 8001284:	4602      	mov	r2, r0
 8001286:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	3340      	adds	r3, #64	; 0x40
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	3348      	adds	r3, #72	; 0x48
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	334c      	adds	r3, #76	; 0x4c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	3354      	adds	r3, #84	; 0x54
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d3af      	bcc.n	8001248 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e044      	b.n	8001378 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3301      	adds	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3b5      	bcc.n	80012ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	687e      	ldr	r6, [r7, #4]
 800138a:	466d      	mov	r5, sp
 800138c:	f106 0410 	add.w	r4, r6, #16
 8001390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800139c:	e885 0003 	stmia.w	r5, {r0, r1}
 80013a0:	1d33      	adds	r3, r6, #4
 80013a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f001 fb07 	bl	80029b8 <USB_DevInit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2202      	movs	r2, #2
 80013b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e014      	b.n	80013e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d102      	bne.n	80013da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f80a 	bl	80013ee <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fcc5 	bl	8002d6e <USB_DevDisconnect>

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	f043 0303 	orr.w	r3, r3, #3
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0cc      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800144c:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d90c      	bls.n	8001474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0b8      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b0:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	494d      	ldr	r1, [pc, #308]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d044      	beq.n	8001558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d119      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e07f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d003      	beq.n	80014f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e067      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f023 0203 	bic.w	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4934      	ldr	r1, [pc, #208]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001528:	f7ff fb60 	bl	8000bec <HAL_GetTick>
 800152c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	e00a      	b.n	8001546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001530:	f7ff fb5c 	bl	8000bec <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e04f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 020c 	and.w	r2, r3, #12
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	429a      	cmp	r2, r3
 8001556:	d1eb      	bne.n	8001530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d20c      	bcs.n	8001580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e032      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4916      	ldr	r1, [pc, #88]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015be:	f000 f821 	bl	8001604 <HAL_RCC_GetSysClockFreq>
 80015c2:	4602      	mov	r2, r0
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	490a      	ldr	r1, [pc, #40]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	5ccb      	ldrb	r3, [r1, r3]
 80015d2:	fa22 f303 	lsr.w	r3, r2, r3
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fac0 	bl	8000b64 <HAL_InitTick>

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	08002ea4 	.word	0x08002ea4
 80015fc:	20000008 	.word	0x20000008
 8001600:	2000000c 	.word	0x2000000c

08001604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001608:	b094      	sub	sp, #80	; 0x50
 800160a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
 8001610:	2300      	movs	r3, #0
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001614:	2300      	movs	r3, #0
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <HAL_RCC_GetSysClockFreq+0x200>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b08      	cmp	r3, #8
 8001626:	d00d      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x40>
 8001628:	2b08      	cmp	r3, #8
 800162a:	f200 80e1 	bhi.w	80017f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x34>
 8001632:	2b04      	cmp	r3, #4
 8001634:	d003      	beq.n	800163e <HAL_RCC_GetSysClockFreq+0x3a>
 8001636:	e0db      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001638:	4b73      	ldr	r3, [pc, #460]	; (8001808 <HAL_RCC_GetSysClockFreq+0x204>)
 800163a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800163c:	e0db      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_GetSysClockFreq+0x208>)
 8001640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001642:	e0d8      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001644:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_RCC_GetSysClockFreq+0x200>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800164c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800164e:	4b6d      	ldr	r3, [pc, #436]	; (8001804 <HAL_RCC_GetSysClockFreq+0x200>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d063      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800165a:	4b6a      	ldr	r3, [pc, #424]	; (8001804 <HAL_RCC_GetSysClockFreq+0x200>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	099b      	lsrs	r3, r3, #6
 8001660:	2200      	movs	r2, #0
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
 8001664:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
 800166e:	2300      	movs	r3, #0
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
 8001672:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001676:	4622      	mov	r2, r4
 8001678:	462b      	mov	r3, r5
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	0159      	lsls	r1, r3, #5
 8001684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001688:	0150      	lsls	r0, r2, #5
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4621      	mov	r1, r4
 8001690:	1a51      	subs	r1, r2, r1
 8001692:	6139      	str	r1, [r7, #16]
 8001694:	4629      	mov	r1, r5
 8001696:	eb63 0301 	sbc.w	r3, r3, r1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016a8:	4659      	mov	r1, fp
 80016aa:	018b      	lsls	r3, r1, #6
 80016ac:	4651      	mov	r1, sl
 80016ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b2:	4651      	mov	r1, sl
 80016b4:	018a      	lsls	r2, r1, #6
 80016b6:	4651      	mov	r1, sl
 80016b8:	ebb2 0801 	subs.w	r8, r2, r1
 80016bc:	4659      	mov	r1, fp
 80016be:	eb63 0901 	sbc.w	r9, r3, r1
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d6:	4690      	mov	r8, r2
 80016d8:	4699      	mov	r9, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	eb18 0303 	adds.w	r3, r8, r3
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	462b      	mov	r3, r5
 80016e4:	eb49 0303 	adc.w	r3, r9, r3
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016f6:	4629      	mov	r1, r5
 80016f8:	024b      	lsls	r3, r1, #9
 80016fa:	4621      	mov	r1, r4
 80016fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001700:	4621      	mov	r1, r4
 8001702:	024a      	lsls	r2, r1, #9
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800170a:	2200      	movs	r2, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
 800170e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001714:	f7fe fd80 	bl	8000218 <__aeabi_uldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4613      	mov	r3, r2
 800171e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001720:	e058      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <HAL_RCC_GetSysClockFreq+0x200>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	099b      	lsrs	r3, r3, #6
 8001728:	2200      	movs	r2, #0
 800172a:	4618      	mov	r0, r3
 800172c:	4611      	mov	r1, r2
 800172e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
 8001738:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800173c:	4642      	mov	r2, r8
 800173e:	464b      	mov	r3, r9
 8001740:	f04f 0000 	mov.w	r0, #0
 8001744:	f04f 0100 	mov.w	r1, #0
 8001748:	0159      	lsls	r1, r3, #5
 800174a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800174e:	0150      	lsls	r0, r2, #5
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4641      	mov	r1, r8
 8001756:	ebb2 0a01 	subs.w	sl, r2, r1
 800175a:	4649      	mov	r1, r9
 800175c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800176c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001774:	ebb2 040a 	subs.w	r4, r2, sl
 8001778:	eb63 050b 	sbc.w	r5, r3, fp
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	00eb      	lsls	r3, r5, #3
 8001786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800178a:	00e2      	lsls	r2, r4, #3
 800178c:	4614      	mov	r4, r2
 800178e:	461d      	mov	r5, r3
 8001790:	4643      	mov	r3, r8
 8001792:	18e3      	adds	r3, r4, r3
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	464b      	mov	r3, r9
 8001798:	eb45 0303 	adc.w	r3, r5, r3
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017aa:	4629      	mov	r1, r5
 80017ac:	028b      	lsls	r3, r1, #10
 80017ae:	4621      	mov	r1, r4
 80017b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b4:	4621      	mov	r1, r4
 80017b6:	028a      	lsls	r2, r1, #10
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017be:	2200      	movs	r2, #0
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	61fa      	str	r2, [r7, #28]
 80017c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c8:	f7fe fd26 	bl	8000218 <__aeabi_uldivmod>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4613      	mov	r3, r2
 80017d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	3301      	adds	r3, #1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80017e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017ee:	e002      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetSysClockFreq+0x204>)
 80017f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3750      	adds	r7, #80	; 0x50
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200

08001810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_RCC_GetHCLKFreq+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800182c:	f7ff fff0 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001830:	4602      	mov	r2, r0
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	0a9b      	lsrs	r3, r3, #10
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	4903      	ldr	r1, [pc, #12]	; (800184c <HAL_RCC_GetPCLK1Freq+0x24>)
 800183e:	5ccb      	ldrb	r3, [r1, r3]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	08002eb4 	.word	0x08002eb4

08001850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001854:	f7ff ffdc 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001858:	4602      	mov	r2, r0
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	0b5b      	lsrs	r3, r3, #13
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	4903      	ldr	r1, [pc, #12]	; (8001874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001866:	5ccb      	ldrb	r3, [r1, r3]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	08002eb4 	.word	0x08002eb4

08001878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d010      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800189c:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800189e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4977      	ldr	r1, [pc, #476]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d010      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80018ca:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018d0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	496b      	ldr	r1, [pc, #428]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d022      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80018f8:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001906:	4960      	ldr	r1, [pc, #384]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001908:	4313      	orrs	r3, r2
 800190a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001916:	2301      	movs	r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001922:	d10c      	bne.n	800193e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800192a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	3b01      	subs	r3, #1
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	4954      	ldr	r1, [pc, #336]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001938:	4313      	orrs	r3, r2
 800193a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d022      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800194a:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800194c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001950:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	494b      	ldr	r1, [pc, #300]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800195a:	4313      	orrs	r3, r2
 800195c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001974:	d10c      	bne.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001976:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800197c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	3b01      	subs	r3, #1
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	493f      	ldr	r1, [pc, #252]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800198a:	4313      	orrs	r3, r2
 800198c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 808a 	beq.w	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019c6:	f7ff f911 	bl	8000bec <HAL_GetTick>
 80019ca:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff f90d 	bl	8000bec <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1d1      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d02f      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d028      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a12:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a20:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d114      	bne.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff f8db 	bl	8000bec <HAL_GetTick>
 8001a36:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f8d7 	bl	8000bec <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e199      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0ee      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a68:	d114      	bne.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a7e:	4902      	ldr	r1, [pc, #8]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
 8001a84:	e00c      	b.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	42470e40 	.word	0x42470e40
 8001a94:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a88      	ldr	r2, [pc, #544]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001a9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a9e:	6093      	str	r3, [r2, #8]
 8001aa0:	4b86      	ldr	r3, [pc, #536]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001aa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aac:	4983      	ldr	r1, [pc, #524]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001ac4:	4b7e      	ldr	r3, [pc, #504]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001ac6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00a      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001ad4:	4b79      	ldr	r3, [pc, #484]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ada:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	4976      	ldr	r1, [pc, #472]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d011      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001af6:	4b71      	ldr	r3, [pc, #452]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	496d      	ldr	r1, [pc, #436]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b14:	d101      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001b26:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	4961      	ldr	r1, [pc, #388]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d004      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b80      	cmp	r3, #128	; 0x80
 8001b48:	f040 80c6 	bne.w	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b4c:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b52:	f7ff f84b 	bl	8000bec <HAL_GetTick>
 8001b56:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b5a:	f7ff f847 	bl	8000bec <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e10b      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b6c:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001b78:	4a53      	ldr	r2, [pc, #332]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d023      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d019      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d004      	beq.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bbc:	d00e      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d019      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d115      	bne.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bda:	d110      	bne.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	061b      	lsls	r3, r3, #24
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	071b      	lsls	r3, r3, #28
 8001bf6:	4931      	ldr	r1, [pc, #196]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d026      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d122      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c2c:	0e1b      	lsrs	r3, r3, #24
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	061b      	lsls	r3, r3, #24
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	071b      	lsls	r3, r3, #28
 8001c4c:	491b      	ldr	r1, [pc, #108]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c5a:	f023 021f 	bic.w	r2, r3, #31
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	4915      	ldr	r1, [pc, #84]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	019b      	lsls	r3, r3, #6
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	071b      	lsls	r3, r3, #28
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7fe ffa4 	bl	8000bec <HAL_GetTick>
 8001ca4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ca6:	e011      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ca8:	f7fe ffa0 	bl	8000bec <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d90a      	bls.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e064      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	424711e0 	.word	0x424711e0
 8001cc4:	42470068 	.word	0x42470068
 8001cc8:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0e7      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00a      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ce4:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf2:	4926      	ldr	r1, [pc, #152]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00a      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d0c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	491d      	ldr	r1, [pc, #116]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00a      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d36:	4915      	ldr	r1, [pc, #84]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d50:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d72:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4904      	ldr	r1, [pc, #16]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e273      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d075      	beq.n	8001e9a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dae:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d00c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dba:	4b85      	ldr	r3, [pc, #532]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d112      	bne.n	8001dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd2:	d10b      	bne.n	8001dec <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	4b7e      	ldr	r3, [pc, #504]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d05b      	beq.n	8001e98 <HAL_RCC_OscConfig+0x108>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d157      	bne.n	8001e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e24e      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d106      	bne.n	8001e04 <HAL_RCC_OscConfig+0x74>
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a75      	ldr	r2, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e01d      	b.n	8001e40 <HAL_RCC_OscConfig+0xb0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x98>
 8001e0e:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6f      	ldr	r2, [pc, #444]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6c      	ldr	r2, [pc, #432]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0xb0>
 8001e28:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a68      	ldr	r2, [pc, #416]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe fed0 	bl	8000bec <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e50:	f7fe fecc 	bl	8000bec <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e213      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	4b5b      	ldr	r3, [pc, #364]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0xc0>
 8001e6e:	e014      	b.n	8001e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe febc 	bl	8000bec <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e78:	f7fe feb8 	bl	8000bec <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e1ff      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0xe8>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d063      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d11c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d116      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x152>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e1d3      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4937      	ldr	r1, [pc, #220]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	e03a      	b.n	8001f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_RCC_OscConfig+0x244>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7fe fe71 	bl	8000bec <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7fe fe6d 	bl	8000bec <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e1b4      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4925      	ldr	r1, [pc, #148]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_OscConfig+0x244>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fe50 	bl	8000bec <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f50:	f7fe fe4c 	bl	8000bec <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e193      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d036      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d016      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_RCC_OscConfig+0x248>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7fe fe30 	bl	8000bec <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f90:	f7fe fe2c 	bl	8000bec <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e173      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x200>
 8001fae:	e01b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_OscConfig+0x248>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fe19 	bl	8000bec <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	e00e      	b.n	8001fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7fe fe15 	bl	8000bec <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d907      	bls.n	8001fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e15c      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	42470000 	.word	0x42470000
 8001fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	4b8a      	ldr	r3, [pc, #552]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8001fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ea      	bne.n	8001fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8097 	beq.w	8002124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b83      	ldr	r3, [pc, #524]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a7e      	ldr	r2, [pc, #504]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b7c      	ldr	r3, [pc, #496]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002022:	2301      	movs	r3, #1
 8002024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	4b79      	ldr	r3, [pc, #484]	; (800220c <HAL_RCC_OscConfig+0x47c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d118      	bne.n	8002064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002032:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x47c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a75      	ldr	r2, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x47c>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203e:	f7fe fdd5 	bl	8000bec <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7fe fdd1 	bl	8000bec <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e118      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b6c      	ldr	r3, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x47c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x2ea>
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002070:	4a65      	ldr	r2, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6713      	str	r3, [r2, #112]	; 0x70
 8002078:	e01c      	b.n	80020b4 <HAL_RCC_OscConfig+0x324>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b05      	cmp	r3, #5
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x30c>
 8002082:	4b61      	ldr	r3, [pc, #388]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a60      	ldr	r2, [pc, #384]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	4b5e      	ldr	r3, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6713      	str	r3, [r2, #112]	; 0x70
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0x324>
 800209c:	4b5a      	ldr	r3, [pc, #360]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a59      	ldr	r2, [pc, #356]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
 80020a8:	4b57      	ldr	r3, [pc, #348]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a56      	ldr	r2, [pc, #344]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 80020ae:	f023 0304 	bic.w	r3, r3, #4
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d015      	beq.n	80020e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7fe fd96 	bl	8000bec <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe fd92 	bl	8000bec <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0d7      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0ee      	beq.n	80020c4 <HAL_RCC_OscConfig+0x334>
 80020e6:	e014      	b.n	8002112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e8:	f7fe fd80 	bl	8000bec <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7fe fd7c 	bl	8000bec <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0c1      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ee      	bne.n	80020f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 800211e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80ad 	beq.w	8002288 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b08      	cmp	r3, #8
 8002138:	d060      	beq.n	80021fc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d145      	bne.n	80021ce <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b33      	ldr	r3, [pc, #204]	; (8002210 <HAL_RCC_OscConfig+0x480>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fd50 	bl	8000bec <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe fd4c 	bl	8000bec <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e093      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69da      	ldr	r2, [r3, #28]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	3b01      	subs	r3, #1
 8002188:	041b      	lsls	r3, r3, #16
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	071b      	lsls	r3, r3, #28
 800219a:	491b      	ldr	r1, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x480>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7fe fd21 	bl	8000bec <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ae:	f7fe fd1d 	bl	8000bec <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e064      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x41e>
 80021cc:	e05c      	b.n	8002288 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_OscConfig+0x480>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe fd0a 	bl	8000bec <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe fd06 	bl	8000bec <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e04d      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x44c>
 80021fa:	e045      	b.n	8002288 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d107      	bne.n	8002214 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e040      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000
 8002210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_RCC_OscConfig+0x504>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d030      	beq.n	8002284 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d129      	bne.n	8002284 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d122      	bne.n	8002284 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002244:	4013      	ands	r3, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800224a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800224c:	4293      	cmp	r3, r2
 800224e:	d119      	bne.n	8002284 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	3b01      	subs	r3, #1
 800225e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d10f      	bne.n	8002284 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d107      	bne.n	8002284 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e03f      	b.n	800232a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fb12 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f829 	bl	8002334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002338:	b0c0      	sub	sp, #256	; 0x100
 800233a:	af00      	add	r7, sp, #0
 800233c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002350:	68d9      	ldr	r1, [r3, #12]
 8002352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	ea40 0301 	orr.w	r3, r0, r1
 800235c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800235e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	431a      	orrs	r2, r3
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	431a      	orrs	r2, r3
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800238c:	f021 010c 	bic.w	r1, r1, #12
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800239a:	430b      	orrs	r3, r1
 800239c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800239e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ae:	6999      	ldr	r1, [r3, #24]
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	ea40 0301 	orr.w	r3, r0, r1
 80023ba:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b95      	ldr	r3, [pc, #596]	; (8002618 <UART_SetConfig+0x2e4>)
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d011      	beq.n	80023ec <UART_SetConfig+0xb8>
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b93      	ldr	r3, [pc, #588]	; (800261c <UART_SetConfig+0x2e8>)
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d00b      	beq.n	80023ec <UART_SetConfig+0xb8>
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b91      	ldr	r3, [pc, #580]	; (8002620 <UART_SetConfig+0x2ec>)
 80023dc:	429a      	cmp	r2, r3
 80023de:	d005      	beq.n	80023ec <UART_SetConfig+0xb8>
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <UART_SetConfig+0x2f0>)
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d104      	bne.n	80023f6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023ec:	f7ff fa30 	bl	8001850 <HAL_RCC_GetPCLK2Freq>
 80023f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023f4:	e003      	b.n	80023fe <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023f6:	f7ff fa17 	bl	8001828 <HAL_RCC_GetPCLK1Freq>
 80023fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002408:	f040 8110 	bne.w	800262c <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800240c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002410:	2200      	movs	r2, #0
 8002412:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002416:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800241a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800241e:	4622      	mov	r2, r4
 8002420:	462b      	mov	r3, r5
 8002422:	1891      	adds	r1, r2, r2
 8002424:	65b9      	str	r1, [r7, #88]	; 0x58
 8002426:	415b      	adcs	r3, r3
 8002428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800242a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800242e:	4621      	mov	r1, r4
 8002430:	eb12 0801 	adds.w	r8, r2, r1
 8002434:	4629      	mov	r1, r5
 8002436:	eb43 0901 	adc.w	r9, r3, r1
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800244e:	4690      	mov	r8, r2
 8002450:	4699      	mov	r9, r3
 8002452:	4623      	mov	r3, r4
 8002454:	eb18 0303 	adds.w	r3, r8, r3
 8002458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800245c:	462b      	mov	r3, r5
 800245e:	eb49 0303 	adc.w	r3, r9, r3
 8002462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002472:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800247a:	460b      	mov	r3, r1
 800247c:	18db      	adds	r3, r3, r3
 800247e:	653b      	str	r3, [r7, #80]	; 0x50
 8002480:	4613      	mov	r3, r2
 8002482:	eb42 0303 	adc.w	r3, r2, r3
 8002486:	657b      	str	r3, [r7, #84]	; 0x54
 8002488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800248c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002490:	f7fd fec2 	bl	8000218 <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4b63      	ldr	r3, [pc, #396]	; (8002628 <UART_SetConfig+0x2f4>)
 800249a:	fba3 2302 	umull	r2, r3, r3, r2
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	011c      	lsls	r4, r3, #4
 80024a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024b4:	4642      	mov	r2, r8
 80024b6:	464b      	mov	r3, r9
 80024b8:	1891      	adds	r1, r2, r2
 80024ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80024bc:	415b      	adcs	r3, r3
 80024be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024c4:	4641      	mov	r1, r8
 80024c6:	eb12 0a01 	adds.w	sl, r2, r1
 80024ca:	4649      	mov	r1, r9
 80024cc:	eb43 0b01 	adc.w	fp, r3, r1
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e4:	4692      	mov	sl, r2
 80024e6:	469b      	mov	fp, r3
 80024e8:	4643      	mov	r3, r8
 80024ea:	eb1a 0303 	adds.w	r3, sl, r3
 80024ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024f2:	464b      	mov	r3, r9
 80024f4:	eb4b 0303 	adc.w	r3, fp, r3
 80024f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002508:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800250c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002510:	460b      	mov	r3, r1
 8002512:	18db      	adds	r3, r3, r3
 8002514:	643b      	str	r3, [r7, #64]	; 0x40
 8002516:	4613      	mov	r3, r2
 8002518:	eb42 0303 	adc.w	r3, r2, r3
 800251c:	647b      	str	r3, [r7, #68]	; 0x44
 800251e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002526:	f7fd fe77 	bl	8000218 <__aeabi_uldivmod>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4611      	mov	r1, r2
 8002530:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <UART_SetConfig+0x2f4>)
 8002532:	fba3 2301 	umull	r2, r3, r3, r1
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2264      	movs	r2, #100	; 0x64
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	1acb      	subs	r3, r1, r3
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002546:	4b38      	ldr	r3, [pc, #224]	; (8002628 <UART_SetConfig+0x2f4>)
 8002548:	fba3 2302 	umull	r2, r3, r3, r2
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002554:	441c      	add	r4, r3
 8002556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800255a:	2200      	movs	r2, #0
 800255c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002560:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002568:	4642      	mov	r2, r8
 800256a:	464b      	mov	r3, r9
 800256c:	1891      	adds	r1, r2, r2
 800256e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002570:	415b      	adcs	r3, r3
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002578:	4641      	mov	r1, r8
 800257a:	1851      	adds	r1, r2, r1
 800257c:	6339      	str	r1, [r7, #48]	; 0x30
 800257e:	4649      	mov	r1, r9
 8002580:	414b      	adcs	r3, r1
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002590:	4659      	mov	r1, fp
 8002592:	00cb      	lsls	r3, r1, #3
 8002594:	4651      	mov	r1, sl
 8002596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259a:	4651      	mov	r1, sl
 800259c:	00ca      	lsls	r2, r1, #3
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	4642      	mov	r2, r8
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025ac:	464b      	mov	r3, r9
 80025ae:	460a      	mov	r2, r1
 80025b0:	eb42 0303 	adc.w	r3, r2, r3
 80025b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025cc:	460b      	mov	r3, r1
 80025ce:	18db      	adds	r3, r3, r3
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d2:	4613      	mov	r3, r2
 80025d4:	eb42 0303 	adc.w	r3, r2, r3
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025e2:	f7fd fe19 	bl	8000218 <__aeabi_uldivmod>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <UART_SetConfig+0x2f4>)
 80025ec:	fba3 1302 	umull	r1, r3, r3, r2
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	2164      	movs	r1, #100	; 0x64
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	3332      	adds	r3, #50	; 0x32
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <UART_SetConfig+0x2f4>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	f003 0207 	and.w	r2, r3, #7
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4422      	add	r2, r4
 8002612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002614:	e109      	b.n	800282a <UART_SetConfig+0x4f6>
 8002616:	bf00      	nop
 8002618:	40011000 	.word	0x40011000
 800261c:	40011400 	.word	0x40011400
 8002620:	40011800 	.word	0x40011800
 8002624:	40011c00 	.word	0x40011c00
 8002628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800262c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002630:	2200      	movs	r2, #0
 8002632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002636:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800263a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800263e:	4642      	mov	r2, r8
 8002640:	464b      	mov	r3, r9
 8002642:	1891      	adds	r1, r2, r2
 8002644:	6239      	str	r1, [r7, #32]
 8002646:	415b      	adcs	r3, r3
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800264e:	4641      	mov	r1, r8
 8002650:	1854      	adds	r4, r2, r1
 8002652:	4649      	mov	r1, r9
 8002654:	eb43 0501 	adc.w	r5, r3, r1
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	00eb      	lsls	r3, r5, #3
 8002662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002666:	00e2      	lsls	r2, r4, #3
 8002668:	4614      	mov	r4, r2
 800266a:	461d      	mov	r5, r3
 800266c:	4643      	mov	r3, r8
 800266e:	18e3      	adds	r3, r4, r3
 8002670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002674:	464b      	mov	r3, r9
 8002676:	eb45 0303 	adc.w	r3, r5, r3
 800267a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800268a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800269a:	4629      	mov	r1, r5
 800269c:	008b      	lsls	r3, r1, #2
 800269e:	4621      	mov	r1, r4
 80026a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a4:	4621      	mov	r1, r4
 80026a6:	008a      	lsls	r2, r1, #2
 80026a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026ac:	f7fd fdb4 	bl	8000218 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4b60      	ldr	r3, [pc, #384]	; (8002838 <UART_SetConfig+0x504>)
 80026b6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	011c      	lsls	r4, r3, #4
 80026be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026c2:	2200      	movs	r2, #0
 80026c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026d0:	4642      	mov	r2, r8
 80026d2:	464b      	mov	r3, r9
 80026d4:	1891      	adds	r1, r2, r2
 80026d6:	61b9      	str	r1, [r7, #24]
 80026d8:	415b      	adcs	r3, r3
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e0:	4641      	mov	r1, r8
 80026e2:	1851      	adds	r1, r2, r1
 80026e4:	6139      	str	r1, [r7, #16]
 80026e6:	4649      	mov	r1, r9
 80026e8:	414b      	adcs	r3, r1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f8:	4659      	mov	r1, fp
 80026fa:	00cb      	lsls	r3, r1, #3
 80026fc:	4651      	mov	r1, sl
 80026fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002702:	4651      	mov	r1, sl
 8002704:	00ca      	lsls	r2, r1, #3
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	4603      	mov	r3, r0
 800270c:	4642      	mov	r2, r8
 800270e:	189b      	adds	r3, r3, r2
 8002710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002714:	464b      	mov	r3, r9
 8002716:	460a      	mov	r2, r1
 8002718:	eb42 0303 	adc.w	r3, r2, r3
 800271c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	67bb      	str	r3, [r7, #120]	; 0x78
 800272a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002738:	4649      	mov	r1, r9
 800273a:	008b      	lsls	r3, r1, #2
 800273c:	4641      	mov	r1, r8
 800273e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002742:	4641      	mov	r1, r8
 8002744:	008a      	lsls	r2, r1, #2
 8002746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800274a:	f7fd fd65 	bl	8000218 <__aeabi_uldivmod>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <UART_SetConfig+0x504>)
 8002754:	fba3 1302 	umull	r1, r3, r3, r2
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	2164      	movs	r1, #100	; 0x64
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	3332      	adds	r3, #50	; 0x32
 8002766:	4a34      	ldr	r2, [pc, #208]	; (8002838 <UART_SetConfig+0x504>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002772:	441c      	add	r4, r3
 8002774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002778:	2200      	movs	r2, #0
 800277a:	673b      	str	r3, [r7, #112]	; 0x70
 800277c:	677a      	str	r2, [r7, #116]	; 0x74
 800277e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002782:	4642      	mov	r2, r8
 8002784:	464b      	mov	r3, r9
 8002786:	1891      	adds	r1, r2, r2
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	415b      	adcs	r3, r3
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002792:	4641      	mov	r1, r8
 8002794:	1851      	adds	r1, r2, r1
 8002796:	6039      	str	r1, [r7, #0]
 8002798:	4649      	mov	r1, r9
 800279a:	414b      	adcs	r3, r1
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027aa:	4659      	mov	r1, fp
 80027ac:	00cb      	lsls	r3, r1, #3
 80027ae:	4651      	mov	r1, sl
 80027b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b4:	4651      	mov	r1, sl
 80027b6:	00ca      	lsls	r2, r1, #3
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	4603      	mov	r3, r0
 80027be:	4642      	mov	r2, r8
 80027c0:	189b      	adds	r3, r3, r2
 80027c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80027c4:	464b      	mov	r3, r9
 80027c6:	460a      	mov	r2, r1
 80027c8:	eb42 0303 	adc.w	r3, r2, r3
 80027cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	663b      	str	r3, [r7, #96]	; 0x60
 80027d8:	667a      	str	r2, [r7, #100]	; 0x64
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027e6:	4649      	mov	r1, r9
 80027e8:	008b      	lsls	r3, r1, #2
 80027ea:	4641      	mov	r1, r8
 80027ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f0:	4641      	mov	r1, r8
 80027f2:	008a      	lsls	r2, r1, #2
 80027f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027f8:	f7fd fd0e 	bl	8000218 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <UART_SetConfig+0x504>)
 8002802:	fba3 1302 	umull	r1, r3, r3, r2
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2164      	movs	r1, #100	; 0x64
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	3332      	adds	r3, #50	; 0x32
 8002814:	4a08      	ldr	r2, [pc, #32]	; (8002838 <UART_SetConfig+0x504>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	f003 020f 	and.w	r2, r3, #15
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4422      	add	r2, r4
 8002828:	609a      	str	r2, [r3, #8]
}
 800282a:	bf00      	nop
 800282c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002830:	46bd      	mov	sp, r7
 8002832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002836:	bf00      	nop
 8002838:	51eb851f 	.word	0x51eb851f

0800283c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800283c:	b084      	sub	sp, #16
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	f107 001c 	add.w	r0, r7, #28
 800284a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	2b01      	cmp	r3, #1
 8002852:	d122      	bne.n	800289a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800287c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d105      	bne.n	800288e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa9c 	bl	8002dcc <USB_CoreReset>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	e01a      	b.n	80028d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fa90 	bl	8002dcc <USB_CoreReset>
 80028ac:	4603      	mov	r3, r0
 80028ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80028b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
 80028c2:	e005      	b.n	80028d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d10b      	bne.n	80028ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f043 0206 	orr.w	r2, r3, #6
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028fa:	b004      	add	sp, #16
 80028fc:	4770      	bx	lr

080028fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0201 	bic.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d115      	bne.n	800296e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800294e:	2001      	movs	r0, #1
 8002950:	f7fe f958 	bl	8000c04 <HAL_Delay>
      ms++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3301      	adds	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa28 	bl	8002db0 <USB_GetMode>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d01e      	beq.n	80029a4 <USB_SetCurrentMode+0x84>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b31      	cmp	r3, #49	; 0x31
 800296a:	d9f0      	bls.n	800294e <USB_SetCurrentMode+0x2e>
 800296c:	e01a      	b.n	80029a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d115      	bne.n	80029a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002980:	2001      	movs	r0, #1
 8002982:	f7fe f93f 	bl	8000c04 <HAL_Delay>
      ms++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3301      	adds	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fa0f 	bl	8002db0 <USB_GetMode>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <USB_SetCurrentMode+0x84>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b31      	cmp	r3, #49	; 0x31
 800299c:	d9f0      	bls.n	8002980 <USB_SetCurrentMode+0x60>
 800299e:	e001      	b.n	80029a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e005      	b.n	80029b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b32      	cmp	r3, #50	; 0x32
 80029a8:	d101      	bne.n	80029ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029b8:	b084      	sub	sp, #16
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80029c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e009      	b.n	80029ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	3340      	adds	r3, #64	; 0x40
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	2200      	movs	r2, #0
 80029e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	3301      	adds	r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b0e      	cmp	r3, #14
 80029f0:	d9f2      	bls.n	80029d8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11c      	bne.n	8002a32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e005      	b.n	8002a3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002a44:	461a      	mov	r2, r3
 8002a46:	2300      	movs	r3, #0
 8002a48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a50:	4619      	mov	r1, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a58:	461a      	mov	r2, r3
 8002a5a:	680b      	ldr	r3, [r1, #0]
 8002a5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10c      	bne.n	8002a7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f965 	bl	8002d3c <USB_SetDevSpeed>
 8002a72:	e008      	b.n	8002a86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a74:	2101      	movs	r1, #1
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f960 	bl	8002d3c <USB_SetDevSpeed>
 8002a7c:	e003      	b.n	8002a86 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a7e:	2103      	movs	r1, #3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f95b 	bl	8002d3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a86:	2110      	movs	r1, #16
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8f3 	bl	8002c74 <USB_FlushTxFifo>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f91f 	bl	8002cdc <USB_FlushRxFifo>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aba:	461a      	mov	r2, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	e043      	b.n	8002b5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ae8:	d118      	bne.n	8002b1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002afc:	461a      	mov	r2, r3
 8002afe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	e013      	b.n	8002b2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b12:	461a      	mov	r2, r3
 8002b14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e008      	b.n	8002b2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	3301      	adds	r3, #1
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d3b7      	bcc.n	8002ad2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	e043      	b.n	8002bf0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b7e:	d118      	bne.n	8002bb2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b92:	461a      	mov	r2, r3
 8002b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e013      	b.n	8002bc4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e008      	b.n	8002bc4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be2:	461a      	mov	r2, r3
 8002be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002be8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	3301      	adds	r3, #1
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d3b7      	bcc.n	8002b68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f043 0210 	orr.w	r2, r3, #16
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <USB_DevInit+0x2b8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f043 0208 	orr.w	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c6c:	b004      	add	sp, #16
 8002c6e:	4770      	bx	lr
 8002c70:	803c3800 	.word	0x803c3800

08002c74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <USB_FlushTxFifo+0x64>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e01b      	b.n	8002ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	daf2      	bge.n	8002c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	019b      	lsls	r3, r3, #6
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <USB_FlushTxFifo+0x64>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e006      	b.n	8002ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d0f0      	beq.n	8002cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	00030d40 	.word	0x00030d40

08002cdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <USB_FlushRxFifo+0x5c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e018      	b.n	8002d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	daf2      	bge.n	8002ce8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a08      	ldr	r2, [pc, #32]	; (8002d38 <USB_FlushRxFifo+0x5c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e006      	b.n	8002d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d0f0      	beq.n	8002d0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	00030d40 	.word	0x00030d40

08002d3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002d88:	f023 0303 	bic.w	r3, r3, #3
 8002d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <USB_CoreReset+0x64>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e01b      	b.n	8002e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	daf2      	bge.n	8002dd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3301      	adds	r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <USB_CoreReset+0x64>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e006      	b.n	8002e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d0f0      	beq.n	8002e02 <USB_CoreReset+0x36>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	00030d40 	.word	0x00030d40

08002e34 <__libc_init_array>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	4d0d      	ldr	r5, [pc, #52]	; (8002e6c <__libc_init_array+0x38>)
 8002e38:	4c0d      	ldr	r4, [pc, #52]	; (8002e70 <__libc_init_array+0x3c>)
 8002e3a:	1b64      	subs	r4, r4, r5
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	2600      	movs	r6, #0
 8002e40:	42a6      	cmp	r6, r4
 8002e42:	d109      	bne.n	8002e58 <__libc_init_array+0x24>
 8002e44:	4d0b      	ldr	r5, [pc, #44]	; (8002e74 <__libc_init_array+0x40>)
 8002e46:	4c0c      	ldr	r4, [pc, #48]	; (8002e78 <__libc_init_array+0x44>)
 8002e48:	f000 f820 	bl	8002e8c <_init>
 8002e4c:	1b64      	subs	r4, r4, r5
 8002e4e:	10a4      	asrs	r4, r4, #2
 8002e50:	2600      	movs	r6, #0
 8002e52:	42a6      	cmp	r6, r4
 8002e54:	d105      	bne.n	8002e62 <__libc_init_array+0x2e>
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5c:	4798      	blx	r3
 8002e5e:	3601      	adds	r6, #1
 8002e60:	e7ee      	b.n	8002e40 <__libc_init_array+0xc>
 8002e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e66:	4798      	blx	r3
 8002e68:	3601      	adds	r6, #1
 8002e6a:	e7f2      	b.n	8002e52 <__libc_init_array+0x1e>
 8002e6c:	08002ec4 	.word	0x08002ec4
 8002e70:	08002ec4 	.word	0x08002ec4
 8002e74:	08002ec4 	.word	0x08002ec4
 8002e78:	08002ec8 	.word	0x08002ec8

08002e7c <memset>:
 8002e7c:	4402      	add	r2, r0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d100      	bne.n	8002e86 <memset+0xa>
 8002e84:	4770      	bx	lr
 8002e86:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8a:	e7f9      	b.n	8002e80 <memset+0x4>

08002e8c <_init>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr

08002e98 <_fini>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr
